{"version":3,"sources":["redux/actions/actionTypes.js","redux/actions/playerInfoActions.js","redux/actions/gameInfoActions.js","redux/actions/errorActions.js","socket/GameSocket.js","Router.js","components/Appbar.js","components/Home.js","components/game_components/Lobby.js","redux/actions/gameActions.js","components/game_components/Answer.js","components/game_components/Topic.js","components/game_components/Vote.js","components/game_components/Results.js","components/Game.js","components/NewGameOptions.js","components/JoinGameOptions.js","components/PageNotFound.js","App.js","serviceWorker.js","redux/reducers/gameInfoReducer.js","redux/reducers/playerInfoReducer.js","redux/reducers/errorReducer.js","redux/reducers/rootReducer.js","index.js","home.svg"],"names":["SET_GAME_INFO","SET_PLAYER_INFO","SET_NAME","SET_ERROR","setPlayerInfo","playerInfo","type","payload","setName","name","setGameInfo","gameInfo","setError","errorId","error","socket","connectToGameServer","dispatch","history","console","log","configJson","serverEndpoint","io","reconnection","on","err","goToHome","emit","push","goToGame","withRouter","_ref","react_default","a","createElement","Fragment","Navbar","bg","Brand","style","color","Container","padding","Row","Col","paddingLeft","margin","react_router_dom","to","Image","src","HomeIcon","alt","width","onClick","Home","Jumbotron","Button","variant","block","goToNewGameOptions","goToJoinGameOptions","Lobby","errors","useSelector","state","useDispatch","handleStartRound","e","gameId","preventDefault","data","ListGroup","players","key","Object","objectSpread","turnPlayerInfoIntoArray","map","player","Item","xs","textAlign","points","lobbyError","printError","Answer","_useState","useState","_useState2","slicedToArray","answerField","setAnswerField","handleAnswer","answer","submitAnswer","answerOnChange","target","value","marginBottom","fontStyle","topic","Form","onSubmit","Group","controlId","Label","Control","onChange","getView","Topic","topicField","setTopicField","handleTopicSubmit","topicOnChage","Vote","handleVote","vote","submitVote","getDropDown","DropdownButton","title","onSelect","playerName","Dropdown","eventKey","createDropDown","getStatus","borderBottom","paddingBottom","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","getAnswerName","generatePlayerAnswer","Results","handleBackToLobby","roundPoints","Game","gameState","game_components_Lobby","game_components_Topic","game_components_Answer","game_components_Vote","game_components_Results","renderGameState","NewGameOptions","nameField","setNameField","handleNewGame","newGame","newGameError","JoinGameOptions","_useState3","_useState4","gameIdField","setGameIdField","handleJoinGame","joinGame","joinGameError","PageNotFound","App","components_Appbar","react_router","exact","path","component","Boolean","window","location","hostname","match","defaultGameInfo","defaultPlayerInfo","defaultErrorList","rootReducer","combineReducers","arguments","undefined","action","errorList","appStore","createStore","applyMiddleware","thunk","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ae039ef2.chunk.js","sourcesContent":["export const SET_GAME_INFO = 'SET_GAME_INFO';\r\nexport const SET_PLAYER_INFO = 'SET_PLAYER_INFO';\r\nexport const SET_NAME = 'SET_NAME';\r\nexport const SET_ERROR = 'SET_ERROR';","import { SET_PLAYER_INFO, SET_NAME} from './actionTypes';\r\n\r\nexport function setPlayerInfo(playerInfo) {\r\n    return { type: SET_PLAYER_INFO, payload: playerInfo }\r\n}\r\n\r\nexport function setName(name) {\r\n    return { type: SET_NAME, payload: name }\r\n}","import { SET_GAME_INFO } from './actionTypes';\r\n\r\nexport function setGameInfo(gameInfo) {\r\n    return { type: SET_GAME_INFO, payload: gameInfo }\r\n}","import { SET_ERROR } from './actionTypes';\r\n\r\nexport function setError(errorId, error) {\r\n    return { type: SET_ERROR, payload: {errorId, error} }\r\n}","import io from 'socket.io-client';\r\nimport { setPlayerInfo } from '../redux/actions/playerInfoActions';\r\nimport { setGameInfo } from '../redux/actions/gameInfoActions';\r\nimport { setError } from '../redux/actions/errorActions';\r\nimport { goToHome } from '../Router';\r\nimport configJson from  '../config.json';\r\n\r\nexport let socket = null;\r\n\r\nexport function connectToGameServer(dispatch, history) {\r\n    console.log(configJson.serverEndpoint);\r\n    socket = io(configJson.serverEndpoint, { reconnection: false });\r\n\r\n    socket.on('connect', () => {\r\n        console.log('Connected');\r\n    });\r\n\r\n    socket.on('connect_error', () => {\r\n        socket = null;\r\n        console.log('Failed to connect');\r\n    })\r\n\r\n    socket.on('allUpdate', (gameInfo, playerInfo) => {\r\n        dispatch(setError('lobbyError', ''));\r\n        dispatch(setGameInfo(gameInfo));\r\n        dispatch(setPlayerInfo(playerInfo));\r\n    })\r\n\r\n    socket.on('backendError', (err) => {\r\n        console.log(err);\r\n    })\r\n\r\n    socket.on('disconnect', () => {\r\n        socket = null;\r\n        goToHome(history);\r\n    })\r\n}","import { socket } from './socket/GameSocket';\r\n\r\nexport function goToHome(history){\r\n    if(socket != null){\r\n        socket.emit('leaveGame');\r\n    }\r\n    history.push('/');\r\n}\r\n\r\nexport function goToNewGameOptions(history){\r\n    history.push('/newGame');\r\n}\r\n\r\nexport function goToJoinGameOptions(history){\r\n    history.push('/joinGame');\r\n}\r\n\r\nexport function goToGame(history){\r\n    history.push('/game');\r\n}","import React from 'react';\r\nimport { Navbar, Container, Row, Col, Image } from 'react-bootstrap';\r\nimport HomeIcon from '../home.svg';\r\nimport { goToHome } from '../Router';\r\nimport { withRouter, Link } from 'react-router-dom';\r\n\r\nfunction Appbar({ history }) {\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar bg='dark'>\r\n        <Navbar.Brand style={{ color: 'white' }}>\r\n          <Container style={{ padding: '0px' }}>\r\n            <Row>\r\n              <Col style={{ paddingLeft: '10px', margin: 0 }}>\r\n                <Link to='/'>\r\n                  <Image src={HomeIcon} alt='' width='30px' onClick={() => { goToHome(history); }}>\r\n                  </Image>\r\n                </Link>\r\n              </Col>\r\n              <Col style={{ paddingLeft: '0px', margin: 0 }}>\r\n                <h5>Things: The Game</h5>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default withRouter(Appbar);","import React from 'react';\r\nimport { Container, Row, Col, Button, Jumbotron } from 'react-bootstrap';\r\nimport { goToNewGameOptions, goToJoinGameOptions } from '../Router';\r\n\r\nfunction Home({ history }) {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <br></br>\r\n                    <Jumbotron>\r\n                        <center>\r\n                            <h2>\r\n                                Things: The Game\r\n                            </h2>\r\n                            <h6>\r\n                                Created by: Alex King\r\n                            </h6>\r\n                            <br></br>\r\n                            <Button variant='primary' block onClick={() => goToNewGameOptions(history)}>\r\n                                New Game\r\n                            </Button>\r\n                            <br></br>\r\n                            <Button variant='secondary' block onClick={() => goToJoinGameOptions(history)}>\r\n                                Join Game\r\n                            </Button>\r\n                        </center>\r\n                    </Jumbotron>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { ListGroup, Button, Container, Row, Col } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { startRound } from '../../redux/actions/gameActions';\r\nimport { goToHome } from '../../Router';\r\n\r\nfunction Lobby({ history }) {\r\n    const errors = useSelector(state => state.errors);\r\n    const gameInfo = useSelector(state => state.gameInfo);\r\n    const playerInfo = useSelector(state => state.playerInfo);\r\n    const dispatch = useDispatch();\r\n\r\n    function handleStartRound(e) {\r\n        e.preventDefault();\r\n        dispatch(startRound(gameInfo.gameId));\r\n    }\r\n\r\n    function turnPlayerInfoIntoArray() {\r\n        let players = [];\r\n        for (let key in playerInfo) {\r\n            players.push({\r\n                name: key,\r\n                ...playerInfo[key]\r\n            })\r\n        }\r\n        return players;\r\n    }\r\n\r\n    function printError() {\r\n        if (errors.lobbyError !== '') {\r\n            return <React.Fragment><br></br><h5>{errors.lobbyError}!!!</h5></React.Fragment>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h4>Game Code: {gameInfo.gameId}</h4>\r\n            <h5>Players:</h5>\r\n            <ListGroup>\r\n                {\r\n                    turnPlayerInfoIntoArray().map(player =>\r\n                        <ListGroup.Item key={player.name} style={{ color: 'white' }}>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col xs={9} style={{ textAlign: 'left' }}>{player.name}</Col>\r\n                                    <Col xs={3} style={{ textAlign: 'right' }}>{player.points}</Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>)\r\n                }\r\n            </ListGroup>\r\n            <br></br>\r\n            <Button variant='primary' block onClick={(e) => handleStartRound(e)}>\r\n                Start Round\r\n            </Button>\r\n            <Button variant='secondary' block onClick={() => goToHome(history)}>\r\n                Leave Game\r\n            </Button>\r\n            {printError()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Lobby;","import { socket, connectToGameServer } from '../../socket/GameSocket';\r\nimport { setGameInfo } from './gameInfoActions';\r\nimport { setPlayerInfo, setName } from './playerInfoActions';\r\nimport { setError } from './errorActions';\r\nimport { goToGame } from '../../Router';\r\n\r\nexport function newGame(name, history) {\r\n    return (dispatch) => {\r\n        if (socket == null) {\r\n            connectToGameServer(dispatch, history);\r\n        }\r\n\r\n        if (socket != null) {\r\n            socket.emit('newGame', name);\r\n\r\n            socket.on('addedToGame', (gameInfo, playerInfo) => {\r\n                dispatch(setName(name));\r\n                dispatch(setGameInfo(gameInfo));\r\n                dispatch(setPlayerInfo(playerInfo));\r\n                goToGame(history);\r\n                dispatch(setError('lobbyError', ''));\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function joinGame(name, gameId, history) {\r\n    return (dispatch) => {\r\n        if (socket == null) {\r\n            connectToGameServer(dispatch, history);\r\n        }\r\n\r\n        if (socket != null) {\r\n            socket.emit('joinGame', gameId, name);\r\n\r\n            socket.on('addedToGame', (gameInfo, playerInfo) => {\r\n                dispatch(setName(name));\r\n                dispatch(setGameInfo(gameInfo));\r\n                dispatch(setPlayerInfo(playerInfo));\r\n                goToGame(history);\r\n                dispatch(setError('lobbyError', ''));\r\n            });\r\n\r\n            socket.on('noGameFound', data => {\r\n                dispatch(setError('joinGameError', 'Game ' + gameId + ' not found'));\r\n            });\r\n\r\n            socket.on('nameAlreadyExists', data => {\r\n                dispatch(setError('joinGameError', 'Name ' + name + ' already exists in the game'));\r\n            });\r\n\r\n            socket.on('gameInProgress', data => {\r\n                dispatch(setError('joinGameError', 'Game ' + gameId + ' already in progress. Wait until they\\'re in the lobby'));\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function startRound(gameId) {\r\n    return (dispatch) => {\r\n        socket.emit('startRound', gameId);\r\n\r\n        socket.on('notEnoughPlayers', data => {\r\n            dispatch(setError('lobbyError', 'Need at least 3 people to start game. You only have '+data));\r\n        })\r\n    }\r\n}\r\n\r\nexport function submitTopic(gameId, topic) {\r\n    return (dispatch) => {\r\n        socket.emit('submittedTopic', gameId, topic);\r\n    }\r\n}\r\n\r\nexport function submitAnswer(gameId, name, answer) {\r\n    return (dispatch) => {\r\n        socket.emit('submittedAnswer', gameId, name, answer);\r\n    }\r\n}\r\n\r\nexport function submitVote(gameId, name, vote) {\r\n    return (dispatch) => {\r\n        socket.emit('voted', gameId, name, vote);\r\n    }\r\n}\r\n\r\nexport function backToLobby(gameId) {\r\n    return (dispatch) => {\r\n        socket.emit('backToLobby', gameId);\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { submitAnswer } from '../../redux/actions/gameActions';\r\n\r\nfunction Answer({ history }) {\r\n    const dispatch = useDispatch();\r\n    const gameInfo = useSelector(state => state.gameInfo);\r\n    const playerInfo = useSelector(state => state.playerInfo);\r\n    const name = useSelector(state => state.name);\r\n    const [answerField, setAnswerField] = useState('');\r\n\r\n    function handleAnswer(e) {\r\n        e.preventDefault();\r\n        dispatch(submitAnswer(gameInfo.gameId, name, answerField))\r\n        setAnswerField('');\r\n    }\r\n\r\n    function answerOnChange(e) {\r\n        setAnswerField(e.target.value);\r\n    }\r\n\r\n    function getView() {\r\n        switch (playerInfo[name].state) {\r\n            case 'unanswered':\r\n                return (\r\n                    <Form onSubmit={(e) => handleAnswer(e)}>\r\n                        <Form.Group controlId='answerField'>\r\n                            <Form.Label>Answer: </Form.Label>\r\n                            <br></br>\r\n                            <Form.Control type='input' value={answerField} onChange={answerOnChange}></Form.Control>\r\n                        </Form.Group>\r\n                        <Button type='submit' variant='primary' block>\r\n                            Submit Answer\r\n                        </Button>\r\n                    </Form>\r\n                )\r\n            case 'answered':\r\n                return (\r\n                    <h5>Waiting on others to submit answer...</h5>\r\n                )\r\n            default:\r\n                return (\r\n                    <React.Fragment></React.Fragment>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h5>Topic:</h5>\r\n            <h5 style={{ marginBottom: '15px', fontStyle: 'italic' }}>{gameInfo.topic}</h5>\r\n            {getView()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Answer;","import React, { useState } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { submitTopic } from '../../redux/actions/gameActions';\r\n\r\nfunction Topic({ history }) {\r\n    const dispatch = useDispatch();\r\n    const gameInfo = useSelector(state => state.gameInfo);\r\n    const playerInfo = useSelector(state => state.playerInfo);\r\n    const name = useSelector(state => state.name);\r\n    const [topicField, setTopicField] = useState('');\r\n\r\n    function handleTopicSubmit(e) {\r\n        e.preventDefault();\r\n        dispatch(submitTopic(gameInfo.gameId, topicField));\r\n        setTopicField('');\r\n    }\r\n\r\n    function topicOnChage(e) {\r\n        setTopicField(e.target.value);\r\n    }\r\n\r\n    function getView() {\r\n        switch (playerInfo[name].state) {\r\n            case 'topic':\r\n                return (\r\n                    <React.Fragment>\r\n                        <h5>Enter topic for round:</h5>\r\n                        <Form onSubmit={(e) => { handleTopicSubmit(e) }}>\r\n                            <Form.Group controlId='topicSubmission'>\r\n                                <Form.Label>Topic: </Form.Label>\r\n                                <br></br>\r\n                                <Form.Control type='input' value={topicField} onChange={topicOnChage}></Form.Control>\r\n                            </Form.Group>\r\n                            <Button type='submit' variant='primary' block>\r\n                                Submit Topic\r\n                            </Button>\r\n                        </Form>\r\n                    </React.Fragment>\r\n                )\r\n            case 'waiting':\r\n                return (\r\n                    <h5 style={{ marginBottom: '15px', fontStyle: 'italic' }}>Waiting for topic submission...</h5>\r\n                )\r\n            default:\r\n                return (<p></p>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {getView()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Topic;","import React from 'react';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { submitVote } from '../../redux/actions/gameActions';\r\n\r\nfunction Vote({ history }) {\r\n    const gameInfo = useSelector(state => state.gameInfo);\r\n    const playerInfo = useSelector(state => state.playerInfo);\r\n    const name = useSelector(state => state.name);\r\n    const dispatch = useDispatch();\r\n\r\n    function handleVote(key, e, answer) {\r\n        let vote = {\r\n            name: key,\r\n            answer: answer\r\n        };\r\n        dispatch(submitVote(gameInfo.gameId, name, vote));\r\n    }\r\n\r\n    function createDropDown(player) {\r\n        let players = [];\r\n        for (let key in playerInfo) {\r\n            players.push(key);\r\n        }\r\n        if (player.state === 'out') {\r\n            return <React.Fragment></React.Fragment>\r\n        }\r\n        return (\r\n            <DropdownButton title='Vote for player' onSelect={(key, e) => handleVote(key, e, player.answer)}>\r\n                {\r\n                    players.map(playerName => {\r\n                        if(playerName === name){\r\n                            return <React.Fragment key={playerName}></React.Fragment>\r\n                        }\r\n                        return <Dropdown.Item eventKey={playerName} key={playerName}>{playerName}</Dropdown.Item>\r\n                    })\r\n                }\r\n            </DropdownButton>\r\n        )\r\n    }\r\n\r\n    function getDropDown(player) {\r\n        switch (playerInfo[name].state) {\r\n            case 'voting':\r\n                return createDropDown(player)\r\n            default:\r\n                return (\r\n                    <React.Fragment></React.Fragment>\r\n                )\r\n        }\r\n    }\r\n\r\n    function getAnswerName(player) {\r\n        switch (player.state) {\r\n            case 'out':\r\n                return player.name + ':'\r\n            default:\r\n                return '????:'\r\n        }\r\n    }\r\n\r\n    function generatePlayerAnswer(player) {\r\n        if(player.name === name){\r\n            return <React.Fragment key={player.name}></React.Fragment>\r\n        }\r\n        return (\r\n            <React.Fragment key={player.name}>\r\n                <h5>{getAnswerName(player)}</h5>\r\n                <h5 style={{ marginBottom: '15px', fontStyle: 'italic' }}>{player.answer}</h5>\r\n                {\r\n                    getDropDown(player)\r\n                }\r\n                <div style={{ marginBottom: '15px', borderBottom: '2px solid white', paddingBottom: '15px' }}></div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    function shuffle(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        while (0 !== currentIndex) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    function turnPlayerInfoIntoArray() {\r\n        let players = [];\r\n        for (let key in playerInfo) {\r\n            players.push({\r\n                name: key,\r\n                ...playerInfo[key]\r\n            })\r\n        }\r\n        return shuffle(players);\r\n    }\r\n\r\n    function getStatus() {\r\n        switch (playerInfo[name].state) {\r\n            case 'out':\r\n                return 'OUT'\r\n            case 'voting':\r\n                return 'VOTE'\r\n            default:\r\n                return 'WAIT'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h5>Status: {getStatus()}</h5>\r\n            <h5>Topic:</h5>\r\n            <h5 style={{ marginBottom: '15px', fontStyle: 'italic', borderBottom: '2px solid white', paddingBottom: '15px' }}>{gameInfo.topic}</h5>\r\n            {\r\n                turnPlayerInfoIntoArray().map(player =>\r\n                    generatePlayerAnswer(player)\r\n                )\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Vote;","import React from 'react';\r\nimport { ListGroup, Button, Container, Row, Col } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { backToLobby } from '../../redux/actions/gameActions';\r\n\r\nfunction Results({ history }) {\r\n    const gameInfo = useSelector(state => state.gameInfo);\r\n    const playerInfo = useSelector(state => state.playerInfo);\r\n    const dispatch = useDispatch();\r\n\r\n    function handleBackToLobby(e) {\r\n        e.preventDefault();\r\n        dispatch(backToLobby(gameInfo.gameId));\r\n    }\r\n\r\n    function turnPlayerInfoIntoArray(){\r\n        let players = [];\r\n        for(let key in playerInfo){\r\n            players.push({\r\n                name:key,\r\n                ...playerInfo[key]\r\n            })\r\n        }\r\n        return players;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h5>Results:</h5>\r\n            <ListGroup>\r\n                {\r\n                    turnPlayerInfoIntoArray().map(player =>\r\n                        <ListGroup.Item key={player.name} style={{ color: 'white' }}>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col xs={9} style={{textAlign:'left'}}>{player.name}</Col>\r\n                                    <Col xs={3} style={{textAlign:'right'}}>{'+'+player.roundPoints}</Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>)\r\n                }\r\n            </ListGroup>\r\n            <br></br>\r\n            <Button variant='primary' block onClick={(e) => handleBackToLobby(e)}>\r\n                Back to Lobby\r\n            </Button>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport { Container, Row, Col, Jumbotron } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport Lobby from './game_components/Lobby';\r\nimport Answer from './game_components/Answer';\r\nimport Topic from './game_components/Topic';\r\nimport Vote from './game_components/Vote';\r\nimport Results from './game_components/Results';\r\nimport { goToHome } from '../Router';\r\n\r\nfunction Game({ history }) {\r\n    const gameInfo = useSelector(state => state.gameInfo);\r\n\r\n    if (gameInfo.gameId === '') {\r\n        goToHome(history);\r\n    }\r\n\r\n    function renderGameState() {\r\n        switch (gameInfo.gameState) {\r\n            case 'lobby':\r\n                return <Lobby history={history} />\r\n            case 'topic':\r\n                return <Topic history={history} />\r\n            case 'answering':\r\n                return <Answer history={history} />\r\n            case 'voting':\r\n                return <Vote history={history} />\r\n            case 'results':\r\n                return <Results history={history} />\r\n            default:\r\n                return <Lobby history={history} />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <center>\r\n                        <br></br>\r\n                        <Jumbotron>\r\n                            {renderGameState()}\r\n                        </Jumbotron>\r\n                    </center>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Game;","import React, { useState } from 'react';\r\nimport { Button, Container, Row, Col, Jumbotron, Form } from 'react-bootstrap';\r\nimport { goToHome } from '../Router';\r\nimport { newGame } from '../redux/actions/gameActions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction NewGameOptions({ history }) {\r\n    const dispatch = useDispatch();\r\n    const errors = useSelector(state => state.errors);\r\n    const [nameField, setNameField] = useState('');\r\n\r\n    function handleNewGame(e) {\r\n        e.preventDefault();\r\n        dispatch(newGame(nameField, history));\r\n        setNameField('');\r\n    }\r\n\r\n    function nameOnChange(e) {\r\n        setNameField(e.target.value);\r\n    }\r\n\r\n    function printError() {\r\n        if (errors.newGameError !== '') {\r\n            return <React.Fragment><br></br><h5>{errors.newGameError}!!!</h5></React.Fragment>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <br></br>\r\n                        <Jumbotron>\r\n                            <center>\r\n                                <h3>New Game Options</h3>\r\n                                <Form onSubmit={(e) => { handleNewGame(e) }}>\r\n                                    <Form.Group controlId='playerName'>\r\n                                        <Form.Label>Name: </Form.Label>\r\n                                        <br></br>\r\n                                        <Form.Control type='input' value={nameField} onChange={nameOnChange}></Form.Control>\r\n                                    </Form.Group>\r\n                                    <Button type='submit' variant='primary' block>\r\n                                        Start\r\n                                    </Button>\r\n                                </Form>\r\n                                <br></br>\r\n                                <Button variant='secondary' block onClick={() => goToHome(history)}>\r\n                                    Back\r\n                                </Button>\r\n                                {printError()}\r\n                            </center>\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default NewGameOptions;","import React, { useState } from 'react';\r\nimport { Button, Container, Row, Col, Jumbotron, Form } from 'react-bootstrap';\r\nimport { goToHome } from '../Router';\r\nimport { joinGame } from '../redux/actions/gameActions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setError } from '../redux/actions/errorActions';\r\n\r\n\r\nfunction JoinGameOptions({ history }) {\r\n    const dispatch = useDispatch();\r\n    const errors = useSelector(state => state.errors);\r\n    const [nameField, setNameField] = useState('');\r\n    const [gameIdField, setGameIdField] = useState('');\r\n\r\n    function handleJoinGame(e) {\r\n        e.preventDefault();\r\n        dispatch(joinGame(nameField, gameIdField, history));\r\n        setNameField('');\r\n        setGameIdField('');\r\n    }\r\n\r\n    function nameOnChange(e) {\r\n        setNameField(e.target.value);\r\n        if (errors.joinGameError !== '') {\r\n            dispatch(setError('joinGameError',''));\r\n        }\r\n    }\r\n\r\n    function gameIdOnChange(e) {\r\n        setGameIdField(e.target.value);\r\n        if (errors.joinGameError !== '') {\r\n            dispatch(setError('joinGameError',''));\r\n        }\r\n    }\r\n\r\n    function printError() {\r\n        if (errors.joinGameError !== '') {\r\n            return <React.Fragment><br></br><h5>{errors.joinGameError}!!!</h5></React.Fragment>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <br></br>\r\n                        <Jumbotron>\r\n                            <center>\r\n                                <h3>Join Game Options</h3>\r\n                                <Form onSubmit={(e) => handleJoinGame(e)}>\r\n                                    <Form.Group controlId='playerName'>\r\n                                        <Form.Label>Name: </Form.Label>\r\n                                        <br></br>\r\n                                        <Form.Control type='input' value={nameField} onChange={nameOnChange}></Form.Control>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId='numberOfPlayers'>\r\n                                        <Form.Label>Game Code: </Form.Label>\r\n                                        <br></br>\r\n                                        <Form.Control type='input' value={gameIdField} onChange={gameIdOnChange}></Form.Control>\r\n                                    </Form.Group>\r\n                                    <Button type='submit' variant='primary' block>\r\n                                        Start\r\n                                    </Button>\r\n                                </Form>\r\n                                <br></br>\r\n                                <Button variant='secondary' block onClick={() => goToHome(history)}>\r\n                                    Back\r\n                                </Button>\r\n                                {printError()}\r\n                            </center>\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default JoinGameOptions;","import React from 'react';\r\nimport { Container, Row, Col, Button, Jumbotron } from 'react-bootstrap';\r\nimport { goToHome } from '../Router';\r\n\r\nfunction PageNotFound({ history }) {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <br></br>\r\n                    <Jumbotron>\r\n                        <center>\r\n                            <h2>\r\n                                Page Not Found\r\n                            </h2>\r\n                            <br></br>\r\n                            <Button variant='secondary' block onClick={() => goToHome(history)}>\r\n                                Home\r\n                                </Button>\r\n                            <br></br>\r\n                        </center>\r\n                    </Jumbotron>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default PageNotFound;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport Appbar from './components/Appbar';\r\nimport Home from './components/Home';\r\nimport Game from './components/Game';\r\nimport NewGameOptions from './components/NewGameOptions';\r\nimport JoinGameOptions from './components/JoinGameOptions';\r\nimport PageNotFound from './components/PageNotFound';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Appbar />\r\n      <Switch>\r\n        <Route exact path='/' component={Home} />\r\n        <Route exact path='/newGame' component={NewGameOptions} />\r\n        <Route exact path='/joinGame' component={JoinGameOptions} />\r\n        <Route exact path='/game' component={Game} />\r\n        <Route component={PageNotFound} />\r\n      </Switch>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { SET_GAME_INFO } from '../actions/actionTypes';\r\n\r\nconst defaultGameInfo = {\r\n    gameId: '',\r\n    gameState: 'lobby',\r\n    topic: 'placeholder'\r\n}\r\n\r\nexport default function gameInfoReducer(gameInfo = defaultGameInfo, action) {\r\n    switch (action.type) {\r\n        case SET_GAME_INFO:\r\n            return gameInfo = action.payload;\r\n        default:\r\n            return gameInfo;\r\n    }\r\n} ","import { SET_PLAYER_INFO, SET_NAME } from '../actions/actionTypes';\r\n\r\nconst defaultPlayerInfo = {};\r\n\r\nexport default function playerInfoReducer(playerInfo = defaultPlayerInfo, action) {\r\n    switch (action.type) {\r\n        case SET_PLAYER_INFO:\r\n            return playerInfo = action.payload;\r\n        default:\r\n            return playerInfo;\r\n    }\r\n}\r\n\r\nexport function nameReducer(name = '', action) {\r\n    switch (action.type) {\r\n        case SET_NAME:\r\n            return name = action.payload;\r\n        default:\r\n            return name;\r\n    }\r\n}","import { SET_ERROR } from '../actions/actionTypes';\r\n\r\nconst defaultErrorList = {\r\n    newGameError:'',\r\n    joinGameError:'',\r\n    lobbyError: ''\r\n};\r\n\r\nexport default function errorReducer(errorList = defaultErrorList, action) {\r\n    switch (action.type) {\r\n        case SET_ERROR:\r\n            errorList[action.payload.errorId] = action.payload.error;\r\n            return errorList = {...errorList};\r\n        default:\r\n            return errorList;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport gameInfoReducer from './gameInfoReducer';\r\nimport playerInfoReducer, { nameReducer } from './playerInfoReducer';\r\nimport errorReducer from './errorReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    gameInfo: gameInfoReducer,\r\n    playerInfo: playerInfoReducer,\r\n    name: nameReducer,\r\n    errors: errorReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './redux/reducers/rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst appStore = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={appStore}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/home.800b2a8d.svg\";"],"sourceRoot":""}